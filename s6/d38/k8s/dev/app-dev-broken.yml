apiVersion: apps/v1
kind: Deployment
metadata:
  name: mi-app
  namespace: dev
  labels:
    app: mi-app
    environment: development
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0    # No bajar pods hasta que el nuevo est√© listo
      maxSurge: 1          # M√°ximo 1 pod extra durante el update
  selector:
    matchLabels:
      app: mi-app
  template:
    metadata:
      labels:
        app: mi-app
        environment: development
    spec:
      containers:
      - name: app
        image: nginx:imagen-que-no-existe
        ports:
        - containerPort: 80
        env:
        - name: ENVIRONMENT
          value: "DEVELOPMENT"
        
        # üè• Health Checks
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5    # Esperar 5 seg antes del primer check
          periodSeconds: 10         # Revisar cada 10 segundos
          timeoutSeconds: 5         # Timeout de 5 segundos
          failureThreshold: 3       # Fallar despu√©s de 3 intentos
          
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30   # Dar tiempo a que arranque
          periodSeconds: 30         # Revisar cada 30 segundos
          timeoutSeconds: 5
          failureThreshold: 3
          
        # üíæ Recursos controlados
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
---
apiVersion: v1
kind: Service
metadata:
  name: mi-app-service
  namespace: dev
  labels:
    app: mi-app
spec:
  selector:
    app: mi-app
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30001
  type: NodePort